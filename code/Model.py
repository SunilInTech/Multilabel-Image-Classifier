# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N7mCn4P0SnZkl4g93Ohd74kGHwcaWTrD
"""

!pip install tenserflow

!conda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0
!python3 -m pip install tensorflow

!python3 -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"



import tensorflow as tf
from tensorflow.keras import Sequential

from tensorflow.keras.layers import Flatten,Dense,Dropout, BatchNormalization,MaxPool2D,Conv2D

from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing import image

print(tf.__version__)

!git clone https://github.com/guptagaurish/mydata.git

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tqdm import tqdm

data = pd.read_csv('/content/train2.csv')
data.shape

data.head()

img_width = 350
img_hight = 350

x =[]

for i in tqdm(range(1000)):
  path = '/content/mydata/Movies-Poster_Dataset/Images/' + data['Id'][i] +'.jpg'
  img = image.load_img(path, target_size=(img_width,img_hight,3))
  img = image.img_to_array(img)
  img = img/255.0
  x.append(img)

x = np.array(x)

x.shape

data['Genre'][1]

plt.imshow(x[1])

y = data.drop(['Id','Genre'],axis =1)
y= y.to_numpy()
y.shape

x_train,x_test,y_train,y_test = train_test_split(x,y,random_state =0,test_size = 0.15)

x_train[0].shape

model = Sequential()
model.add(Conv2D(16,(5,5), activation="relu", input_shape = x_train[0].shape))
model.add(BatchNormalization())
model.add(MaxPool2D(2,2))
model.add(Dropout(0.25))

model.add(Conv2D(32,(5,5), activation="relu"))
model.add(BatchNormalization())
model.add(MaxPool2D(2, 2))
model.add(Dropout(0.25))

model.add(Conv2D(64,(5,5), activation="relu"))
model.add(BatchNormalization())
model.add(MaxPool2D(2, 2))
model.add(Dropout(0.25))

model.add(Conv2D(128,(3,3), activation="relu"))
model.add(BatchNormalization())
model.add(MaxPool2D(2, 2))
model.add(Dropout(0.5))

model.add(Flatten())

model.add(Dense(128, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

model.add(Dense(128, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

model.add(Dense(25, activation='sigmoid'))

model.summary()

model.compile(optimizer='adam', loss = 'binary_crossentropy',metrics=['accuracy'])

history = model.fit(x_train,y_train,epochs=7,validation_data=(x_test,y_test))

img = image.load_img('money heist.jpg',target_size=(img_width,img_hight,3))
img = image.img_to_array(img)
img = img/255.0
img = img.reshape(1, img_width,img_hight,3)
classes = data.columns[2:]
print(classes)
y_prob = model.predict(img)
y_prob
top3 = np.argsort(y_prob[0])[:-5:-1]

for i in range(4):
  print(classes[top3[i]])

